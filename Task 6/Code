#include <debug.h>
#include <ch32v00x.h>
#include <ch32v00x_gpio.h>

// Define pin connections for the keypad
#define KEYPAD_ROW1 GPIO_Pin_4
#define KEYPAD_ROW2 GPIO_Pin_5
#define KEYPAD_ROW3 GPIO_Pin_6
#define KEYPAD_ROW4 GPIO_Pin_7
#define KEYPAD_COL1 GPIO_Pin_0
#define KEYPAD_COL2 GPIO_Pin_1
#define KEYPAD_COL3 GPIO_Pin_2
#define KEYPAD_COL4 GPIO_Pin_3

// I2C LCD Address
#define LCD_ADDRESS 0x27

void delay(uint32_t count) {
    while (count--) {
        __asm("nop");
    }
}

void GPIO_Config(void) {
    GPIO_InitTypeDef GPIO_InitStructure;

    // Enable GPIO clocks
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);

    // Configure keypad row pins as output
    GPIO_InitStructure.GPIO_Pin = KEYPAD_ROW1 | KEYPAD_ROW2 | KEYPAD_ROW3 | KEYPAD_ROW4;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_Init(GPIOA, &GPIO_InitStructure);

    // Configure keypad column pins as input with pull-up resistors
    GPIO_InitStructure.GPIO_Pin = KEYPAD_COL1 | KEYPAD_COL2 | KEYPAD_COL3 | KEYPAD_COL4;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
    GPIO_Init(GPIOA, &GPIO_InitStructure);
}

char readKeypad(void) {
    // Scan keypad rows
    for (int row = 0; row < 4; row++) {
        GPIO_ResetBits(GPIOA, KEYPAD_ROW1 | KEYPAD_ROW2 | KEYPAD_ROW3 | KEYPAD_ROW4);
        GPIO_SetBits(GPIOA, (KEYPAD_ROW1 << row));
        delay(10000);

        if (GPIO_ReadInputDataBit(GPIOA, KEYPAD_COL1) == Bit_RESET) return '1' + row * 4;
        if (GPIO_ReadInputDataBit(GPIOA, KEYPAD_COL2) == Bit_RESET) return '2' + row * 4;
        if (GPIO_ReadInputDataBit(GPIOA, KEYPAD_COL3) == Bit_RESET) return '3' + row * 4;
        if (GPIO_ReadInputDataBit(GPIOA, KEYPAD_COL4) == Bit_RESET) return '4' + row * 4;
    }
    return '\0';
}

void I2C_Config(void) {
    I2C_InitTypeDef I2C_InitStructure;

    // Enable I2C clock
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C1, ENABLE);

    // I2C configuration
    I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
    I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
    I2C_InitStructure.I2C_OwnAddress1 = 0x00;
    I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
    I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
    I2C_InitStructure.I2C_ClockSpeed = 100000;
    I2C_Init(I2C1, &I2C_InitStructure);

    // Enable I2C
    I2C_Cmd(I2C1, ENABLE);
}

void I2C_Write(uint8_t address, uint8_t data) {
    // Send I2C start signal
    I2C_GenerateSTART(I2C1, ENABLE);
    while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_MODE_SELECT));

    // Send I2C address
    I2C_Send7bitAddress(I2C1, address, I2C_Direction_Transmitter);
    while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED));

    // Send data
    I2C_SendData(I2C1, data);
    while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTING));

    // Send I2C stop signal
    I2C_GenerateSTOP(I2C1, ENABLE);
}

void LCD_SendCommand(uint8_t cmd) {
    // Send command to the LCD
    I2C_Write(LCD_ADDRESS, cmd);
    delay(5000);
}

void LCD_Init(void) {
    // Initialize the LCD
    delay(50000);  // Wait for LCD to power up

    LCD_SendCommand(0x30);  // Function set
    delay(5000);
    LCD_SendCommand(0x30);  // Function set
    delay(5000);
    LCD_SendCommand(0x30);  // Function set
    delay(5000);
    LCD_SendCommand(0x20);  // Set to 4-bit mode
    delay(5000);

    // Configure the LCD
    LCD_SendCommand(0x28);  // Function set: 4-bit, 2 line, 5x8 dots
    LCD_SendCommand(0x08);  // Display off
    LCD_SendCommand(0x01);  // Clear display
    delay(5000);
    LCD_SendCommand(0x06);  // Entry mode set: increment automatically, no display shift
    LCD_SendCommand(0x0C);  // Display on, cursor off, blink off
}

void LCD_Print(char* message) {
    while (*message) {
        I2C_Write(LCD_ADDRESS, *message++);
        delay(5000);
    }
}

int main(void) {
    // System initialization
    SystemInit();
    debug_init();

    // GPIO configuration
    GPIO_Config();

    // I2C configuration
    I2C_Config();

    // LCD initialization
    LCD_Init();

    while (1) {
        char key = readKeypad();
        if (key) {
            // Print the key pressed to the LCD
            char message[2] = { key, '\0' };
            LCD_Print(message);
            LCD_Print("**Floor**");
        }
        delay(100000);
    }
}
